"""create_sync_events_table

Revision ID: 5c355f70c792
Revises: 
Create Date: 2025-06-21 17:44:03.682853

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '5c355f70c792'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('documents',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('filename', sa.String(length=255), nullable=False),
    sa.Column('original_path', sa.String(length=500), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('file_hash', sa.String(length=64), nullable=False),
    sa.Column('mime_type', sa.String(length=100), nullable=True),
    sa.Column('document_type', sa.String(length=20), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('processing_started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processing_completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processing_error', sa.Text(), nullable=True),
    sa.Column('processing_metadata', sa.JSON(), nullable=True),
    sa.Column('title', sa.String(length=500), nullable=True),
    sa.Column('content_preview', sa.Text(), nullable=True),
    sa.Column('language', sa.String(length=10), nullable=True),
    sa.Column('word_count', sa.Integer(), nullable=True),
    sa.Column('page_count', sa.Integer(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('is_current_version', sa.Boolean(), nullable=False),
    sa.Column('parent_document_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('file_modified_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('last_accessed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('embedding_model', sa.String(length=100), nullable=True),
    sa.Column('embedding_created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('total_chunks', sa.Integer(), nullable=True),
    sa.CheckConstraint('file_size >= 0', name='check_file_size_positive'),
    sa.CheckConstraint('version >= 1', name='check_version_positive'),
    sa.ForeignKeyConstraint(['parent_document_id'], ['documents.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tenant_id', 'filename', 'version', name='uq_tenant_filename_version')
    )
    op.create_index('idx_documents_hash', 'documents', ['file_hash'], unique=False)
    op.create_index('idx_documents_tenant_filename', 'documents', ['tenant_id', 'filename'], unique=False)
    op.create_index('idx_documents_tenant_status', 'documents', ['tenant_id', 'status'], unique=False)
    op.create_index('idx_documents_updated', 'documents', ['updated_at'], unique=False)
    op.create_index(op.f('ix_documents_tenant_id'), 'documents', ['tenant_id'], unique=False)
    op.create_table('sync_events',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sync_run_id', sa.String(), nullable=False),
    sa.Column('tenant_id', sa.String(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('event_type', sa.String(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('message', sa.String(), nullable=True),
    sa.Column('event_metadata', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sync_events_id'), 'sync_events', ['id'], unique=False)
    op.create_index(op.f('ix_sync_events_sync_run_id'), 'sync_events', ['sync_run_id'], unique=False)
    op.create_index(op.f('ix_sync_events_tenant_id'), 'sync_events', ['tenant_id'], unique=False)
    op.create_table('tenants',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('tenant_id', sa.String(length=64), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('display_name', sa.String(length=255), nullable=True),
    sa.Column('tier', sa.String(length=20), nullable=False),
    sa.Column('isolation_level', sa.String(length=20), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('activated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('suspended_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('max_documents', sa.Integer(), nullable=False),
    sa.Column('max_storage_mb', sa.Integer(), nullable=False),
    sa.Column('max_api_calls_per_day', sa.Integer(), nullable=False),
    sa.Column('max_concurrent_queries', sa.Integer(), nullable=False),
    sa.Column('contact_email', sa.String(length=255), nullable=True),
    sa.Column('contact_name', sa.String(length=255), nullable=True),
    sa.Column('billing_email', sa.String(length=255), nullable=True),
    sa.Column('custom_config', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_tenant_created', 'tenants', ['created_at'], unique=False)
    op.create_index('idx_tenant_status', 'tenants', ['status'], unique=False)
    op.create_index('idx_tenant_tier', 'tenants', ['tier'], unique=False)
    op.create_index(op.f('ix_tenants_tenant_id'), 'tenants', ['tenant_id'], unique=True)
    op.create_table('document_chunks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('document_id', sa.UUID(), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('content_hash', sa.String(length=64), nullable=False),
    sa.Column('chunk_index', sa.Integer(), nullable=False),
    sa.Column('chunk_type', sa.String(length=20), nullable=False),
    sa.Column('page_number', sa.Integer(), nullable=True),
    sa.Column('section_title', sa.String(length=500), nullable=True),
    sa.Column('parent_chunk_id', sa.UUID(), nullable=True),
    sa.Column('hierarchy_level', sa.Integer(), nullable=True),
    sa.Column('token_count', sa.Integer(), nullable=False),
    sa.Column('word_count', sa.Integer(), nullable=False),
    sa.Column('character_count', sa.Integer(), nullable=False),
    sa.Column('language', sa.String(length=10), nullable=True),
    sa.Column('chunk_method', sa.String(length=50), nullable=True),
    sa.Column('chunk_size', sa.Integer(), nullable=True),
    sa.Column('overlap_size', sa.Integer(), nullable=True),
    sa.Column('embedding_vector', sa.JSON(), nullable=True),
    sa.Column('embedding_model', sa.String(length=100), nullable=True),
    sa.Column('embedding_created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('coherence_score', sa.Float(), nullable=True),
    sa.Column('completeness_score', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint('character_count >= 0', name='check_character_count_positive'),
    sa.CheckConstraint('hierarchy_level >= 0', name='check_hierarchy_level_positive'),
    sa.CheckConstraint('token_count >= 0', name='check_token_count_positive'),
    sa.CheckConstraint('word_count >= 0', name='check_word_count_positive'),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], ),
    sa.ForeignKeyConstraint(['parent_chunk_id'], ['document_chunks.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('document_id', 'chunk_index', name='uq_document_chunk_index')
    )
    op.create_index('idx_chunks_content_hash', 'document_chunks', ['content_hash'], unique=False)
    op.create_index('idx_chunks_document_index', 'document_chunks', ['document_id', 'chunk_index'], unique=False)
    op.create_index('idx_chunks_embedding_model', 'document_chunks', ['embedding_model'], unique=False)
    op.create_index('idx_chunks_tenant_type', 'document_chunks', ['tenant_id', 'chunk_type'], unique=False)
    op.create_index(op.f('ix_document_chunks_tenant_id'), 'document_chunks', ['tenant_id'], unique=False)
    op.create_table('document_processing_jobs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('document_id', sa.UUID(), nullable=False),
    sa.Column('job_type', sa.String(length=50), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('total_steps', sa.Integer(), nullable=True),
    sa.Column('completed_steps', sa.Integer(), nullable=True),
    sa.Column('current_step', sa.String(length=100), nullable=True),
    sa.Column('progress_percentage', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('estimated_completion', sa.DateTime(timezone=True), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('error_details', sa.JSON(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=True),
    sa.Column('max_retries', sa.Integer(), nullable=True),
    sa.Column('job_metadata', sa.JSON(), nullable=True),
    sa.Column('result_metadata', sa.JSON(), nullable=True),
    sa.CheckConstraint('completed_steps >= 0', name='check_completed_steps_positive'),
    sa.CheckConstraint('max_retries >= 0', name='check_max_retries_positive'),
    sa.CheckConstraint('priority >= 1 AND priority <= 10', name='check_priority_range'),
    sa.CheckConstraint('progress_percentage >= 0.0 AND progress_percentage <= 100.0', name='check_progress_range'),
    sa.CheckConstraint('retry_count >= 0', name='check_retry_count_positive'),
    sa.CheckConstraint('total_steps >= 1', name='check_total_steps_positive'),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_processing_jobs_document', 'document_processing_jobs', ['document_id'], unique=False)
    op.create_index('idx_processing_jobs_priority', 'document_processing_jobs', ['priority', 'created_at'], unique=False)
    op.create_index('idx_processing_jobs_tenant_status', 'document_processing_jobs', ['tenant_id', 'status'], unique=False)
    op.create_index(op.f('ix_document_processing_jobs_tenant_id'), 'document_processing_jobs', ['tenant_id'], unique=False)
    op.create_table('tenant_api_keys',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('tenant_id', sa.String(length=64), nullable=False),
    sa.Column('key_name', sa.String(length=100), nullable=False),
    sa.Column('key_hash', sa.String(length=256), nullable=False),
    sa.Column('key_prefix', sa.String(length=20), nullable=False),
    sa.Column('scopes', sa.JSON(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('key_hash')
    )
    op.create_index('idx_api_key_active', 'tenant_api_keys', ['is_active'], unique=False)
    op.create_index('idx_api_key_hash', 'tenant_api_keys', ['key_hash'], unique=False)
    op.create_index('idx_api_key_tenant', 'tenant_api_keys', ['tenant_id'], unique=False)
    op.create_table('tenant_documents',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('tenant_id', sa.String(length=64), nullable=False),
    sa.Column('document_id', sa.String(length=255), nullable=False),
    sa.Column('filename', sa.String(length=500), nullable=False),
    sa.Column('file_path', sa.String(length=1000), nullable=False),
    sa.Column('file_hash', sa.String(length=64), nullable=True),
    sa.Column('file_size_bytes', sa.Integer(), nullable=False),
    sa.Column('mime_type', sa.String(length=100), nullable=True),
    sa.Column('document_type', sa.String(length=50), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('embedding_model', sa.String(length=100), nullable=True),
    sa.Column('chunk_count', sa.Integer(), nullable=False),
    sa.Column('vector_store_id', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tenant_id', 'document_id', name='uq_tenant_document_id')
    )
    op.create_index('idx_tenant_document_id', 'tenant_documents', ['tenant_id', 'document_id'], unique=False)
    op.create_table('tenant_usage_stats',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('tenant_id', sa.String(length=64), nullable=False),
    sa.Column('period_start', sa.DateTime(timezone=True), nullable=False),
    sa.Column('period_end', sa.DateTime(timezone=True), nullable=False),
    sa.Column('period_type', sa.String(length=20), nullable=False),
    sa.Column('documents_processed', sa.Integer(), nullable=False),
    sa.Column('embeddings_generated', sa.Integer(), nullable=False),
    sa.Column('queries_processed', sa.Integer(), nullable=False),
    sa.Column('api_calls_made', sa.Integer(), nullable=False),
    sa.Column('storage_used_mb', sa.Integer(), nullable=False),
    sa.Column('avg_query_time_ms', sa.Integer(), nullable=True),
    sa.Column('avg_embedding_time_ms', sa.Integer(), nullable=True),
    sa.Column('error_count', sa.Integer(), nullable=False),
    sa.Column('success_rate', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tenant_id', 'period_type', 'period_start', name='uq_tenant_usage_period')
    )
    op.create_index('idx_usage_stats_period', 'tenant_usage_stats', ['tenant_id', 'period_type', 'period_start'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_usage_stats_period', table_name='tenant_usage_stats')
    op.drop_table('tenant_usage_stats')
    op.drop_index('idx_tenant_document_id', table_name='tenant_documents')
    op.drop_table('tenant_documents')
    op.drop_index('idx_api_key_tenant', table_name='tenant_api_keys')
    op.drop_index('idx_api_key_hash', table_name='tenant_api_keys')
    op.drop_index('idx_api_key_active', table_name='tenant_api_keys')
    op.drop_table('tenant_api_keys')
    op.drop_index(op.f('ix_document_processing_jobs_tenant_id'), table_name='document_processing_jobs')
    op.drop_index('idx_processing_jobs_tenant_status', table_name='document_processing_jobs')
    op.drop_index('idx_processing_jobs_priority', table_name='document_processing_jobs')
    op.drop_index('idx_processing_jobs_document', table_name='document_processing_jobs')
    op.drop_table('document_processing_jobs')
    op.drop_index(op.f('ix_document_chunks_tenant_id'), table_name='document_chunks')
    op.drop_index('idx_chunks_tenant_type', table_name='document_chunks')
    op.drop_index('idx_chunks_embedding_model', table_name='document_chunks')
    op.drop_index('idx_chunks_document_index', table_name='document_chunks')
    op.drop_index('idx_chunks_content_hash', table_name='document_chunks')
    op.drop_table('document_chunks')
    op.drop_index(op.f('ix_tenants_tenant_id'), table_name='tenants')
    op.drop_index('idx_tenant_tier', table_name='tenants')
    op.drop_index('idx_tenant_status', table_name='tenants')
    op.drop_index('idx_tenant_created', table_name='tenants')
    op.drop_table('tenants')
    op.drop_index(op.f('ix_sync_events_tenant_id'), table_name='sync_events')
    op.drop_index(op.f('ix_sync_events_sync_run_id'), table_name='sync_events')
    op.drop_index(op.f('ix_sync_events_id'), table_name='sync_events')
    op.drop_table('sync_events')
    op.drop_index(op.f('ix_documents_tenant_id'), table_name='documents')
    op.drop_index('idx_documents_updated', table_name='documents')
    op.drop_index('idx_documents_tenant_status', table_name='documents')
    op.drop_index('idx_documents_tenant_filename', table_name='documents')
    op.drop_index('idx_documents_hash', table_name='documents')
    op.drop_table('documents')
    # ### end Alembic commands ###
