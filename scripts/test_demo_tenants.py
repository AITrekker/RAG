#!/usr/bin/env python3
"""
Test Demo Tenants Script

Uses the API keys generated by setup_demo_tenants.py to test the demo tenants.
Tests basic functionality: tenant authentication, file operations, and RAG queries.

Usage:
    python scripts/test_demo_tenants.py
"""

import asyncio
import json
import aiohttp
import sys
from pathlib import Path
from typing import Dict, Any

BASE_URL = "http://localhost:8000"

class DemoTenantTester:
    def __init__(self):
        # Load API keys from the demo setup
        keys_file = Path("demo_tenant_keys.json")
        if not keys_file.exists():
            print("❌ demo_tenant_keys.json not found. Run setup_demo_tenants.py first.")
            sys.exit(1)
        
        with open(keys_file) as f:
            self.tenant_keys = json.load(f)
        
        # Load admin key from .env
        env_file = Path(".env")
        self.admin_key = None
        if env_file.exists():
            with open(env_file) as f:
                for line in f:
                    if line.startswith("ADMIN_API_KEY="):
                        self.admin_key = line.split("=", 1)[1].strip()
                        break
    
    async def test_api_endpoint(self, session: aiohttp.ClientSession, method: str, 
                               endpoint: str, api_key: str, data: Dict = None) -> Dict[str, Any]:
        """Test a single API endpoint"""
        url = f"{BASE_URL}{endpoint}"
        headers = {"X-API-Key": api_key, "Content-Type": "application/json"}
        
        try:
            if method.upper() == "GET":
                async with session.get(url, headers=headers) as response:
                    result = await response.json()
                    return {"status": response.status, "data": result}
            elif method.upper() == "POST":
                async with session.post(url, headers=headers, json=data) as response:
                    result = await response.json()
                    return {"status": response.status, "data": result}
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    async def test_admin_access(self, session: aiohttp.ClientSession) -> bool:
        """Test admin API access"""
        print("\n=== Testing Admin Access ===")
        
        if not self.admin_key:
            print("❌ Admin API key not found in .env")
            return False
        
        # Test admin tenant list
        result = await self.test_api_endpoint(session, "GET", "/api/v1/auth/tenants", self.admin_key)
        
        if result["status"] == 200:
            tenants = result["data"]
            print(f"✅ Admin access working - Found {len(tenants)} tenants")
            for tenant in tenants:
                print(f"   - {tenant['name']} ({tenant['slug']})")
            return True
        else:
            print(f"❌ Admin access failed: {result}")
            return False
    
    async def test_tenant_access(self, session: aiohttp.ClientSession, 
                                tenant_name: str, tenant_info: Dict) -> bool:
        """Test individual tenant access"""
        print(f"\n=== Testing {tenant_name} ===")
        api_key = tenant_info["api_key"]
        slug = tenant_info["slug"]
        
        # Test tenant authentication
        auth_result = await self.test_api_endpoint(session, "GET", "/api/v1/auth/tenant", api_key)
        
        if auth_result["status"] != 200:
            print(f"❌ {tenant_name} authentication failed: {auth_result}")
            return False
        
        tenant_data = auth_result["data"]
        print(f"✅ {tenant_name} authenticated successfully")
        print(f"   - Tenant ID: {tenant_data.get('id', 'N/A')}")
        print(f"   - Plan: {tenant_data.get('plan_tier', 'N/A')}")
        
        # Test file listing
        files_result = await self.test_api_endpoint(session, "GET", "/api/v1/files", api_key)
        
        if files_result["status"] == 200:
            files = files_result["data"]
            if isinstance(files, list):
                print(f"✅ File listing working - Found {len(files)} files")  
                if len(files) > 0:
                    print("   Files:")
                    for file in files[:3]:  # Show first 3 files
                        print(f"     - {file.get('filename', 'N/A')} ({file.get('file_size', 0)} bytes)")
            else:
                print(f"✅ File listing working - Response: {files}")
        else:
            print(f"⚠️ File listing failed: {files_result}")
        
        # Test health check  
        health_result = await self.test_api_endpoint(session, "GET", "/api/v1/health/status", api_key)
        
        if health_result["status"] == 200:
            health = health_result["data"]
            print(f"✅ Health check passed - Status: {health.get('status', 'unknown')}")
            
            # Show service status
            services = health.get('services', {})
            for service, status in services.items():
                icon = "✅" if status == "healthy" else "⚠️"
                print(f"   {icon} {service}: {status}")
        else:
            print(f"⚠️ Health check failed: {health_result}")
        
        return True
    
    async def test_rag_query(self, session: aiohttp.ClientSession) -> bool:
        """Test RAG query functionality with first tenant"""
        print("\n=== Testing RAG Query ===")
        
        # Use first tenant for RAG testing
        first_tenant = list(self.tenant_keys.items())[0]
        tenant_name, tenant_info = first_tenant
        api_key = tenant_info["api_key"]
        
        # Test RAG query with simple query
        query_data = {
            "query": "What is our company mission?"
        }
        
        rag_result = await self.test_api_endpoint(session, "POST", "/api/v1/query", api_key, query_data)
        
        if rag_result["status"] == 200:
            response = rag_result["data"]
            print(f"✅ RAG query successful")
            print(f"   Query: {query_data['query']}")
            print(f"   Answer: {response.get('answer', 'No answer')[:100]}...")
            
            sources = response.get('sources', [])
            print(f"   Sources: {len(sources)} documents")
            for source in sources[:2]:
                print(f"     - {source.get('filename', 'Unknown')} (score: {source.get('score', 0):.2f})")
            
            return True
        else:
            print(f"⚠️ RAG query failed: {rag_result}")
            return False
    
    async def run_tests(self) -> bool:
        """Run all tests"""
        print("🧪 Demo Tenants Test Suite")
        print("=" * 50)
        
        async with aiohttp.ClientSession() as session:
            success = True
            
            # Test admin access
            admin_success = await self.test_admin_access(session)
            success = success and admin_success
            
            # Test each tenant
            for tenant_name, tenant_info in self.tenant_keys.items():
                tenant_success = await self.test_tenant_access(session, tenant_name, tenant_info) 
                success = success and tenant_success
            
            # Test RAG functionality
            rag_success = await self.test_rag_query(session)
            success = success and rag_success
            
            # Summary
            print("\n" + "=" * 50)
            if success:
                print("🎉 All tests passed!")
                print("✅ Demo tenants are working correctly")
                print("\n📝 Next steps:")
                print("1. Upload documents: POST /api/v1/files/upload")
                print("2. Trigger sync: POST /api/v1/sync/trigger") 
                print("3. Query documents: POST /api/v1/query")
            else:
                print("❌ Some tests failed")
                print("⚠️ Check the backend logs for more details")
            
            return success


async def main():
    """Main entry point"""
    tester = DemoTenantTester()
    success = await tester.run_tests()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    asyncio.run(main())