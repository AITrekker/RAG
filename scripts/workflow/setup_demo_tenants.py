#!/usr/bin/env python3
"""
Demo Tenants Setup Script - Pure API Wrapper

Creates demo tenants by making HTTP API calls to the backend.
This script contains no business logic - only API communication.

Usage:
    python scripts/workflow/setup_demo_tenants.py --env test
    python scripts/workflow/setup_demo_tenants.py --env development

Prerequisites:
    - Backend containers running (docker-compose up -d)
    - Admin API key available in .env file
"""

import argparse
import json
import os
import shutil
import sys
import requests
from pathlib import Path
from typing import Dict, Any, Optional
from dotenv import load_dotenv

# Add project root to Python path for imports
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

try:
    from scripts.utils import get_paths
    paths = get_paths()
    PROJECT_ROOT = paths.root
except ImportError:
    # Fallback to old method
    SCRIPT_DIR = Path(__file__).parent.absolute()
    PROJECT_ROOT = SCRIPT_DIR.parent.parent

def load_config() -> Dict[str, Any]:
    """Load configuration from .env file."""
    env_file = PROJECT_ROOT / ".env"
    load_dotenv(env_file)
    
    admin_tenant_id = os.getenv("ADMIN_TENANT_ID")
    admin_api_key = os.getenv("ADMIN_API_KEY") 
    backend_url = os.getenv("BACKEND_URL", "http://localhost:8000")
    
    if not admin_tenant_id or not admin_api_key:
        print("❌ Missing admin credentials in .env file")
        print("   Required: ADMIN_TENANT_ID, ADMIN_API_KEY")
        print("   These should be auto-generated by the init container.")
        sys.exit(1)
    
    return {
        "admin_tenant_id": admin_tenant_id,
        "admin_api_key": admin_api_key,
        "backend_url": backend_url.rstrip("/")
    }

def make_api_request(method: str, url: str, headers: Dict[str, str], data: Optional[Dict] = None, timeout: int = 60) -> requests.Response:
    """Make HTTP API request with error handling."""
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, timeout=timeout)
        elif method.upper() == "POST":
            response = requests.post(url, headers=headers, json=data, timeout=timeout)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
            
        response.raise_for_status()
        return response
        
    except requests.exceptions.Timeout:
        print(f"❌ API request timed out after {timeout} seconds")
        print(f"   URL: {url}")
        print("   Try increasing timeout or check backend health")
        sys.exit(1)
    except requests.exceptions.RequestException as e:
        print(f"❌ API request failed: {e}")
        if hasattr(e, 'response') and e.response is not None:
            try:
                error_detail = e.response.json()
                print(f"   Error details: {error_detail}")
            except:
                print(f"   Response: {e.response.text}")
        sys.exit(1)

def initialize_database_schema(config: Dict[str, Any], environment: str) -> None:
    """Initialize database tables for target environment via API."""
    print(f"🗄️ Initializing database schema for {environment} environment...")
    
    url = f"{config['backend_url']}/api/v1/admin/system/init-database?environment={environment}"
    headers = {"X-API-Key": config["admin_api_key"]}
    
    response = make_api_request("POST", url, headers)
    result = response.json()
    
    print(f"✅ {result['message']}")

def create_tenant_via_api(config: Dict[str, Any], tenant_name: str, description: str) -> Dict[str, Any]:
    """Create tenant via API with extended timeout for slow operations."""
    url = f"{config['backend_url']}/api/v1/admin/tenants"
    headers = {"X-API-Key": config["admin_api_key"]}
    data = {
        "name": tenant_name,
        "description": description,
        "auto_sync": True,
        "sync_interval": 60
    }
    
    # Use longer timeout for tenant creation as it can involve initialization
    response = make_api_request("POST", url, headers, data, timeout=120)
    return response.json()

def get_tenant_by_name(config: Dict[str, Any], tenant_name: str) -> Optional[Dict[str, Any]]:
    """Get tenant by name via API."""
    url = f"{config['backend_url']}/api/v1/admin/tenants"
    headers = {"X-API-Key": config["admin_api_key"]}
    
    response = make_api_request("GET", url, headers)
    data = response.json()
    
    # Extract tenants array from response wrapper
    tenants = data.get("tenants", [])
    
    # Find tenant by name
    for tenant in tenants:
        if tenant["name"] == tenant_name:
            return tenant
    return None

def copy_demo_files(tenant_id: str, tenant_name: str) -> int:
    """Copy demo files from demo-data directory to tenant's directory."""
    demo_source_dir = PROJECT_ROOT / "demo-data" / tenant_name
    tenant_upload_dir = PROJECT_ROOT / "data" / "uploads" / tenant_id
    
    if not demo_source_dir.exists():
        return 0
        
    # Create tenant upload directory if it doesn't exist
    tenant_upload_dir.mkdir(parents=True, exist_ok=True)
    
    files_copied = 0
    for demo_file in demo_source_dir.glob("*"):
        if demo_file.is_file():
            dest_file = tenant_upload_dir / demo_file.name
            # Only copy if destination doesn't exist or is older
            if not dest_file.exists() or demo_file.stat().st_mtime > dest_file.stat().st_mtime:
                shutil.copy2(demo_file, dest_file)
                files_copied += 1
                print(f"    * Copied: {demo_file.name}")
            else:
                print(f"    * Skipped: {demo_file.name} (already exists)")
    
    return files_copied

def regenerate_tenant_api_key(config: Dict[str, Any], tenant_id: str) -> Optional[str]:
    """Regenerate API key for existing tenant."""
    try:
        # Regenerate API key via admin API
        url = f"{config['backend_url']}/api/v1/admin/tenants/{tenant_id}/api-keys"
        headers = {"X-API-Key": config["admin_api_key"]}
        data = {
            "name": "Demo Key",
        }
        
        response = make_api_request("POST", url, headers, data, timeout=30)
        result = response.json()
        
        return result.get("api_key")
        
    except Exception as e:
        print(f"⚠️ Could not regenerate API key: {e}")
        return None

def setup_demo_tenants(config: Dict[str, Any], environment: str) -> tuple[Dict[str, str], Dict[str, Dict]]:
    """Setup demo tenants via API calls with improved error handling."""
    print("\n=== Setting Up Demo Tenants ===")
    
    tenant_configs = [
        {"name": "tenant1", "description": f"Demo tenant 1 with company documents ({environment})"},
        {"name": "tenant2", "description": f"Demo tenant 2 with company documents ({environment})"},
        {"name": "tenant3", "description": f"Demo tenant 3 with company documents ({environment})"}
    ]
    
    api_keys = {}
    tenant_data = {}  # Store tenant ID and info for JSON file generation
    
    for config_item in tenant_configs:
        tenant_name = config_item["name"]
        print(f"\n--- Setting up {tenant_name} ---")
        
        try:
            # Check if tenant exists
            tenant = get_tenant_by_name(config, tenant_name)
            
            if not tenant:
                # Create tenant via API
                print(f"⏳ Creating tenant {tenant_name}...")
                tenant = create_tenant_via_api(config, tenant_name, config_item["description"])
                print(f"✓ Created tenant: {tenant['name']}")
                # New tenants get their own API key from creation
                api_key = tenant.get("api_key", "")
            else:
                print(f"✓ Found existing tenant: {tenant['name']}")
                # For existing tenants, use admin API key (has access to all tenants)
                print(f"⏳ Using admin API key for existing tenant...")
                api_key = config["admin_api_key"]
                print(f"  ✓ Admin API key provides access to all tenants")
            
            api_keys[tenant_name] = api_key
            tenant_data[tenant_name] = {
                "id": tenant["id"],
                "name": tenant["name"],
                "slug": tenant.get("slug", tenant_name)
            }
            
            print(f"  - Tenant ID: {tenant['id']}")
            print(f"  - API Key: {api_key[:20]}..." if api_key and len(api_key) > 20 else f"  - API Key: {api_key}")
            
            # Copy demo files
            files_copied = copy_demo_files(tenant["id"], tenant_name)
            if files_copied > 0:
                print(f"  - Demo files: {files_copied} files copied")
            else:
                print(f"  - ⚠️ No demo files found for {tenant_name}")
                
        except Exception as e:
            print(f"❌ Failed to setup {tenant_name}: {e}")
            # Continue with other tenants instead of failing completely
            api_keys[tenant_name] = "*** SETUP FAILED ***"
            tenant_data[tenant_name] = {"id": "unknown", "name": tenant_name, "slug": tenant_name}
            continue
    
    return api_keys, tenant_data

def save_api_keys(api_keys: Dict[str, str], environment: str, tenant_data: Dict[str, Dict] = None) -> None:
    """Save API keys to JSON file using tenant IDs as keys."""
    keys_file = PROJECT_ROOT / "demo_tenant_keys.json"
    
    # Create structured format using tenant IDs
    tenant_keys = {}
    for tenant_name, api_key in api_keys.items():
        # Get tenant ID from tenant_data if available
        tenant_id = None
        if tenant_data and tenant_name in tenant_data:
            tenant_id = tenant_data[tenant_name].get("id")
        
        if tenant_id:
            tenant_keys[tenant_id] = {
                "api_key": api_key,
                "slug": tenant_name,
                "description": f"Demo {tenant_name} with company documents ({environment})"
            }
        else:
            # Fallback to tenant name as key
            tenant_keys[tenant_name] = {
                "api_key": api_key,
                "slug": tenant_name,
                "description": f"Demo {tenant_name} with company documents ({environment})"
            }
    
    try:
        with open(keys_file, 'w') as f:
            json.dump(tenant_keys, f, indent=2)
        print(f"✓ API keys saved to {keys_file}")
        
        # Also copy to frontend public directory if it exists
        frontend_public = PROJECT_ROOT / "src" / "frontend" / "public"
        if frontend_public.exists():
            frontend_keys_file = frontend_public / "demo_tenant_keys.json"
            shutil.copy2(keys_file, frontend_keys_file)
            print(f"✓ API keys copied to frontend: {frontend_keys_file}")
            
    except Exception as e:
        print(f"✗ Failed to save API keys: {e}")

def cleanup_resources():
    """Clean up any lingering resources."""
    try:
        # Force garbage collection to cleanup any remaining async resources
        import gc
        gc.collect()
        
        # Close any remaining event loops
        try:
            import asyncio
            loop = asyncio.get_event_loop()
            if loop.is_running():
                loop.stop()
        except RuntimeError:
            pass  # No loop running
            
    except Exception as e:
        print(f"⚠️ Cleanup warning: {e}")

def validate_setup(config: Dict[str, Any]) -> bool:
    """Validate that the backend is accessible before starting setup."""
    try:
        print("🔍 Validating backend connection...")
        url = f"{config['backend_url']}/api/v1/health/liveness"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        print("✓ Backend is accessible")
        return True
    except Exception as e:
        print(f"❌ Backend validation failed: {e}")
        print("   Make sure containers are running: docker-compose up -d")
        return False

def main():
    """Main entry point with improved error handling and cleanup."""
    parser = argparse.ArgumentParser(description='Setup demo tenants via API calls')
    parser.add_argument('--env', choices=['production', 'staging', 'test', 'development'],
                       default='test', help='Target environment (default: test)')
    parser.add_argument('--skip-validation', action='store_true',
                       help='Skip backend validation (use with caution)')
    args = parser.parse_args()
    
    print("🚀 Demo Tenants Setup (API-based)")
    print("=" * 50)
    
    try:
        # Load configuration
        config = load_config()
        print(f"🌍 Target Environment: {args.env}")
        print(f"🖥️ Backend URL: {config['backend_url']}")
        
        # Step 0: Validate backend connection
        if not args.skip_validation:
            if not validate_setup(config):
                sys.exit(1)
        
        # Step 1: Initialize database schema for target environment
        initialize_database_schema(config, args.env)
        
        # Step 2: Setup demo tenants
        api_keys, tenant_data = setup_demo_tenants(config, args.env)
        
        # Check if any tenants failed
        failed_tenants = [name for name, key in api_keys.items() if "FAILED" in key or "UNABLE" in key]
        successful_tenants = [name for name, key in api_keys.items() if "FAILED" not in key and "UNABLE" not in key]
        
        # Step 3: Save API keys (only if we have some successful tenants)
        if successful_tenants:
            save_api_keys(api_keys, args.env, tenant_data)
        
        # Success summary
        print("\n" + "=" * 50)
        if successful_tenants:
            print("🎉 Demo Setup Complete!")
            print(f"✅ Database schema initialized for {args.env}")
            print(f"✅ {len(successful_tenants)} demo tenants configured successfully")
            if failed_tenants:
                print(f"⚠️ {len(failed_tenants)} tenant(s) failed: {', '.join(failed_tenants)}")
            print(f"✅ API keys saved to demo_tenant_keys.json")
        else:
            print("❌ Setup failed - no tenants were configured successfully")
            sys.exit(1)
        
        print("\n🔑 Quick Reference:")
        print(f"Admin API Key: {config['admin_api_key'][:20]}...")
        for tenant_name, api_key in api_keys.items():
            if "FAILED" not in api_key and "UNABLE" not in api_key:
                print(f"{tenant_name}: {api_key[:20]}...")
        
        print("\n🧪 Test Commands:")
        print("# Test admin access:")
        print(f"curl -H 'X-API-Key: {config['admin_api_key']}' {config['backend_url']}/api/v1/auth/tenants")
        
        if successful_tenants:
            print("\n# Test tenant access:")
            first_successful_key = next(key for key in api_keys.values() if "FAILED" not in key and "UNABLE" not in key)
            print(f"curl -H 'X-API-Key: {first_successful_key}' {config['backend_url']}/api/v1/files")
        
        print("\n📋 Next Steps:")
        print("1. Run: python scripts/test_demo_tenants.py")
        print("2. Or test manually with the API keys above")
        
    except KeyboardInterrupt:
        print("\n⏹️ Setup interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n❌ Setup failed: {e}")
        sys.exit(1)
    finally:
        # Always cleanup resources
        cleanup_resources()

if __name__ == "__main__":
    main()