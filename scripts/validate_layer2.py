#!/usr/bin/env python3
"""
Layer 2 Implementation Validation Script

This script validates that all Layer 2 components have been properly implemented:
- PostgreSQL integration and migrations
- Document monitoring and delta sync  
- API security and rate limiting
- Error handling and logging
- Sync reporting dashboard
"""

import sys
import os
from pathlib import Path
from datetime import datetime

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def validate_file_exists(file_path: str, description: str) -> bool:
    """Validate that a file exists."""
    path = project_root / file_path
    exists = path.exists()
    status = "‚úì" if exists else "‚úó"
    print(f"  {status} {description}: {file_path}")
    return exists

def validate_database_integration():
    """Validate PostgreSQL integration components."""
    print("\n=== Task 7: PostgreSQL Integration and Data Migration ===")
    
    all_valid = True
    
    # Check configuration files
    all_valid &= validate_file_exists("src/backend/config/settings.py", "Enhanced PostgreSQL settings")
    all_valid &= validate_file_exists("src/backend/db/session.py", "Database session management")
    
    # Check migration files
    all_valid &= validate_file_exists("src/backend/migrations/alembic.ini", "Alembic configuration")
    all_valid &= validate_file_exists("src/backend/migrations/versions/001_initial_production_schema.py", "Initial migration")
    all_valid &= validate_file_exists("scripts/migrate_db.py", "Migration management script")
    
    # Check Docker configuration
    all_valid &= validate_file_exists("docker-compose.yml", "Docker Compose with PostgreSQL")
    
    return all_valid

def validate_document_monitoring():
    """Validate document monitoring and sync components."""
    print("\n=== Task 8: Automated Document Monitoring and Sync ===")
    
    all_valid = True
    
    # Check delta sync implementation
    all_valid &= validate_file_exists("src/backend/core/delta_sync.py", "Delta synchronization system")
    all_valid &= validate_file_exists("src/backend/utils/file_monitor.py", "File monitoring system")
    
    # Check API routes
    all_valid &= validate_file_exists("src/backend/api/v1/routes/sync.py", "Sync API routes")
    
    return all_valid

def validate_api_security():
    """Validate API security and rate limiting."""
    print("\n=== Task 9: API Security and Rate Limiting ===")
    
    all_valid = True
    
    # Check security middleware
    all_valid &= validate_file_exists("src/backend/middleware/auth.py", "API authentication middleware")
    
    # Check requirements
    all_valid &= validate_file_exists("requirements.txt", "Updated requirements with Redis")
    
    return all_valid

def validate_error_handling():
    """Validate error handling and logging."""
    print("\n=== Task 10: Error Handling and Logging ===")
    
    all_valid = True
    
    # Check monitoring system
    all_valid &= validate_file_exists("src/backend/utils/monitoring.py", "Monitoring and logging system")
    
    # Check main application integration
    all_valid &= validate_file_exists("src/backend/main.py", "Main app with monitoring middleware")
    
    return all_valid

def validate_sync_dashboard():
    """Validate sync reporting dashboard."""
    print("\n=== Task 11: Sync Reporting Dashboard ===")
    
    all_valid = True
    
    # Check backend API
    all_valid &= validate_file_exists("src/backend/api/v1/routes/sync.py", "Sync API with reporting endpoints")
    
    # Check frontend components
    all_valid &= validate_file_exists("src/frontend/src/components/Sync/SyncDashboard.tsx", "React sync dashboard")
    all_valid &= validate_file_exists("src/frontend/src/hooks/usePerformanceMonitoring.ts", "Performance monitoring hook")
    
    return all_valid

def validate_layer2_integration():
    """Validate Layer 2 integration."""
    print("\n=== Layer 2 Integration Validation ===")
    
    all_valid = True
    
    # Check integration files
    all_valid &= validate_file_exists("tests/test_layer2_integration.py", "Layer 2 integration tests")
    all_valid &= validate_file_exists("src/backend/api/v1/routes/health.py", "Enhanced health endpoints")
    
    return all_valid

def check_code_quality():
    """Check for basic code quality indicators."""
    print("\n=== Code Quality Checks ===")
    
    # Check for comprehensive error handling
    monitoring_file = project_root / "src/backend/utils/monitoring.py"
    if monitoring_file.exists():
        content = monitoring_file.read_text()
        has_error_tracking = "ErrorTracker" in content
        has_performance_monitor = "PerformanceMonitor" in content
        has_system_monitor = "SystemMonitor" in content
        
        print(f"  {'‚úì' if has_error_tracking else '‚úó'} Error tracking implementation")
        print(f"  {'‚úì' if has_performance_monitor else '‚úó'} Performance monitoring implementation")
        print(f"  {'‚úì' if has_system_monitor else '‚úó'} System monitoring implementation")
        
        return has_error_tracking and has_performance_monitor and has_system_monitor
    
    return False

def main():
    """Main validation function."""
    print("=" * 70)
    print("ENTERPRISE RAG PLATFORM - LAYER 2 VALIDATION")
    print("=" * 70)
    print(f"Validation Time: {datetime.now().isoformat()}")
    print(f"Project Root: {project_root}")
    
    # Run all validations
    validations = [
        ("PostgreSQL Integration", validate_database_integration),
        ("Document Monitoring", validate_document_monitoring),
        ("API Security", validate_api_security),
        ("Error Handling", validate_error_handling),
        ("Sync Dashboard", validate_sync_dashboard),
        ("Integration", validate_layer2_integration),
        ("Code Quality", check_code_quality),
    ]
    
    results = {}
    overall_success = True
    
    for name, validator in validations:
        try:
            results[name] = validator()
            overall_success &= results[name]
        except Exception as e:
            print(f"  ‚úó Validation failed: {e}")
            results[name] = False
            overall_success = False
    
    # Summary
    print("\n" + "=" * 70)
    print("LAYER 2 VALIDATION SUMMARY")
    print("=" * 70)
    
    for name, success in results.items():
        status = "‚úì PASSED" if success else "‚úó FAILED"
        print(f"{status:>12} {name}")
    
    print("\n" + "=" * 70)
    if overall_success:
        print("üéâ LAYER 2 IMPLEMENTATION COMPLETE!")
        print("‚úì All production readiness features implemented")
        print("‚úì PostgreSQL integration with migrations")
        print("‚úì Delta sync and file monitoring")
        print("‚úì API security with rate limiting")
        print("‚úì Comprehensive monitoring and logging")
        print("‚úì Sync reporting dashboard")
        print("\n‚û°Ô∏è  READY FOR LAYER 3: Advanced Features")
    else:
        print("‚ùå LAYER 2 IMPLEMENTATION INCOMPLETE")
        print("Some components need attention before proceeding to Layer 3")
    
    print("=" * 70)
    
    return 0 if overall_success else 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code) 