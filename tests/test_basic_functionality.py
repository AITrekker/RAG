"""
Basic functionality tests for RAG system.
"""

import pytest
import asyncio
import sys
import os
import time
from pathlib import Path
from uuid import UUID

# Add project root to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Set environment variables
os.environ.setdefault("DATABASE_URL", "postgresql+asyncpg://rag_user:rag_password@localhost:5432/rag_database")
os.environ.setdefault("QDRANT_URL", "http://rag_qdrant:6333")

from src.backend.database import AsyncSessionLocal
from src.backend.services.rag import RAGPipeline, VectorRetriever, QueryProcessor
from src.backend.services.rag.base import Query

# Test configuration
TEST_TENANT_ID = UUID("110174a1-8e2f-47a1-af19-1478f1be07a8")
QDRANT_URL = "http://localhost:6333"  # Use localhost since we're running outside Docker
MAX_QUERY_TIME = 15.0  # Very lenient for CPU fallback and infrastructure issues

class TestBasicFunctionality:
    """Basic functionality tests."""
    
    @pytest.mark.asyncio
    async def test_database_connection(self):
        """Test basic database connectivity."""
        try:
            async with AsyncSessionLocal() as session:
                # Simple test query with proper SQLAlchemy text wrapper
                from sqlalchemy import text
                result = await session.execute(text("SELECT 1"))
                assert result.scalar() == 1
                print("‚úÖ Database connection successful")
        except Exception as e:
            print(f"‚ùå Database connection failed: {e}")
            pytest.skip("Database not available")
    
    @pytest.mark.asyncio
    async def test_vector_retriever_initialization(self):
        """Test vector retriever can be initialized."""
        try:
            async with AsyncSessionLocal() as session:
                retriever = VectorRetriever(session, qdrant_url=QDRANT_URL)
                assert retriever is not None
                print("‚úÖ VectorRetriever initialized successfully")
        except Exception as e:
            print(f"‚ùå VectorRetriever initialization failed: {e}")
            pytest.fail(f"Failed to initialize VectorRetriever: {e}")
    
    @pytest.mark.asyncio
    async def test_query_processor(self):
        """Test query processor functionality."""
        try:
            processor = QueryProcessor()
            query = processor.process_query("test query", TEST_TENANT_ID)
            
            assert isinstance(query, Query)
            assert query.text == "test query"
            assert query.tenant_id == TEST_TENANT_ID
            assert query.min_score == 0.3  # Should use the fixed threshold
            
            print("‚úÖ QueryProcessor working correctly")
        except Exception as e:
            print(f"‚ùå QueryProcessor test failed: {e}")
            pytest.fail(f"QueryProcessor failed: {e}")
    
    @pytest.mark.asyncio 
    async def test_embedding_generation(self):
        """Test embedding generation."""
        try:
            async with AsyncSessionLocal() as session:
                retriever = VectorRetriever(session, qdrant_url=QDRANT_URL)
                
                test_text = "company mission innovation"
                start_time = time.time()
                
                embedding = await retriever._generate_query_embedding(test_text)
                generation_time = time.time() - start_time
                
                # Validate embedding
                assert len(embedding) == 384  # all-MiniLM-L6-v2 dimensions
                assert all(isinstance(x, float) for x in embedding)
                assert generation_time < 15.0  # Very generous timeout for CPU fallback
                
                print(f"‚úÖ Embedding generation successful ({generation_time:.3f}s)")
                
                # Check if GPU was used
                import torch
                if torch.cuda.is_available():
                    print(f"üöÄ GPU available and likely used")
                else:
                    print(f"üíª CPU fallback mode")
                    
        except Exception as e:
            print(f"‚ùå Embedding generation failed: {e}")
            pytest.fail(f"Embedding generation failed: {e}")
    
    @pytest.mark.asyncio
    async def test_vector_search_basic(self):
        """Test basic vector search functionality."""
        try:
            async with AsyncSessionLocal() as session:
                retriever = VectorRetriever(session, qdrant_url=QDRANT_URL)
                processor = QueryProcessor()
                
                # Create a simple query
                query = processor.process_query("company mission", TEST_TENANT_ID)
                
                start_time = time.time()
                chunks = await retriever.search(query)
                search_time = time.time() - start_time
                
                print(f"üîç Vector search completed in {search_time:.3f}s")
                print(f"üì¶ Found {len(chunks)} results")
                
                if chunks:
                    top_chunk = chunks[0]
                    print(f"üèÜ Top result: {top_chunk.filename} (score: {top_chunk.score:.3f})")
                    print(f"üìÑ Content preview: {top_chunk.content[:100]}...")
                    
                    # Validate result structure
                    assert top_chunk.chunk_id is not None
                    assert top_chunk.file_id is not None
                    assert top_chunk.score >= 0.0
                    assert len(top_chunk.content) > 0
                    
                    print("‚úÖ Vector search working correctly")
                else:
                    print("‚ö†Ô∏è  No search results found - may need test data")
                
                # Performance check - only if we have infrastructure
                if chunks:  # Only check performance if we got results
                    assert search_time < MAX_QUERY_TIME
                
        except Exception as e:
            print(f"‚ùå Vector search failed: {e}")
            # Don't fail the test if it's just missing test data
            if "connection" in str(e).lower() or "qdrant" in str(e).lower():
                pytest.skip("Qdrant not available")
            else:
                print(f"Non-critical error in vector search: {e}")
    
    @pytest.mark.asyncio
    async def test_rag_pipeline_basic(self):
        """Test basic RAG pipeline functionality."""
        try:
            async with AsyncSessionLocal() as session:
                pipeline = RAGPipeline(session)
                
                # Override retriever with correct URL
                pipeline.retriever = VectorRetriever(session, qdrant_url=QDRANT_URL)
                
                query_text = "company mission"
                start_time = time.time()
                
                response = await pipeline.process_query(query_text, TEST_TENANT_ID)
                processing_time = time.time() - start_time
                
                # Validate response structure
                assert response is not None
                assert response.answer is not None
                assert isinstance(response.sources, list)
                assert response.confidence >= 0.0
                assert response.processing_time > 0
                assert response.query == query_text
                
                print(f"‚úÖ RAG pipeline completed in {processing_time:.3f}s")
                print(f"üí¨ Generated answer: {len(response.answer)} characters")
                print(f"üìö Sources: {len(response.sources)}")
                print(f"üéØ Confidence: {response.confidence:.3f}")
                
                if response.answer:
                    print(f"üìù Answer preview: {response.answer[:200]}...")
                
                # Performance check
                assert processing_time < MAX_QUERY_TIME * 2  # More lenient for full pipeline
                
        except Exception as e:
            print(f"‚ùå RAG pipeline failed: {e}")
            # Don't fail if it's infrastructure issues
            if any(term in str(e).lower() for term in ["connection", "qdrant", "database"]):
                pytest.skip("Infrastructure not available")
            else:
                pytest.fail(f"RAG pipeline failed: {e}")
    
    def test_imports_and_modules(self):
        """Test that all required modules can be imported."""
        try:
            # Test core imports
            from src.backend.services.rag import RAGPipeline, VectorRetriever, QueryProcessor, ContextRanker
            from src.backend.services.rag.base import Query, RAGResponse, RetrievedChunk
            from src.backend.models.database import Tenant, File, EmbeddingChunk
            from src.backend.database import AsyncSessionLocal
            
            print("‚úÖ All core modules imported successfully")
            
            # Test ML imports
            import torch
            import sentence_transformers
            import numpy
            
            print("‚úÖ All ML dependencies available")
            print(f"üî• PyTorch version: {torch.__version__}")
            print(f"üß† Sentence Transformers available")
            print(f"üî¢ NumPy version: {numpy.__version__}")
            
            if torch.cuda.is_available():
                print(f"üöÄ CUDA available: {torch.cuda.get_device_name()}")
            else:
                print(f"üíª CUDA not available - will use CPU")
                
        except ImportError as e:
            pytest.fail(f"Required module import failed: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Non-critical import issue: {e}")

if __name__ == "__main__":
    # Allow running tests directly
    pytest.main([__file__, "-v", "-s"])