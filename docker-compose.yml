services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: rag_postgres
    environment:
      POSTGRES_DB: rag_database
      POSTGRES_USER: rag_user
      POSTGRES_PASSWORD: rag_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - rag_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rag_user -d rag_database"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: rag_backend
    environment:
      - DATABASE_URL=postgresql://rag_user:rag_password@postgres:5432/rag_database
      # Using chroma_db and tenant-specific uploads instead of global directories
      - CUDA_VISIBLE_DEVICES=0
      - TRANSFORMERS_CACHE=/app/cache/transformers
    ports:
      - "8000:8000"
    volumes:
      - ./src/backend:/app/src/backend
      - ./data:/app/data
      - ./cache:/app/cache
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - rag_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped

  # Frontend Development Server
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: rag_frontend
    environment:
      - VITE_API_BASE_URL=http://localhost:8000/api/v1
      - VITE_APP_TITLE=Enterprise RAG Platform
    ports:
      - "3000:3000"
    volumes:
      - ./src/frontend:/app/src/frontend
      - /app/src/frontend/node_modules
    networks:
      - rag_network
    depends_on:
      - backend
    restart: unless-stopped

  # Chroma Vector Database (for development)
  chroma:
    image: chromadb/chroma:latest
    container_name: rag_chroma
    environment:
      - CHROMA_SERVER_AUTHN_CREDENTIALS_FILE=/app/server.htpasswd
      - CHROMA_SERVER_AUTHN_PROVIDER=chromadb.auth.basic.BasicAuthenticationServerProvider
    ports:
      - "8001:8000"
    volumes:
      - chroma_data:/chroma/chroma
      - ./docker/chroma/server.htpasswd:/app/server.htpasswd
    networks:
      - rag_network
    restart: unless-stopped

  # Redis for Caching (Optional for Layer 1, but useful for development)
  redis:
    image: redis:7-alpine
    container_name: rag_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rag_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx for reverse proxy and static file serving
  nginx:
    image: nginx:alpine
    container_name: rag_nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
      - frontend
    networks:
      - rag_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  chroma_data:
    driver: local
  redis_data:
    driver: local

networks:
  rag_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 