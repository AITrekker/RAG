services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: rag_postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=rag_db
      - POSTGRES_USER=rag_user
      - POSTGRES_PASSWORD=rag_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - rag_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rag_user -d rag_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: rag_qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    networks:
      - rag_network
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 bash -c '</dev/tcp/localhost/6333' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Database and System Init Container  
  init:
    container_name: rag_init
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    volumes:
      - ./src/backend:/app/src/backend
      - ./scripts:/app/scripts
      - ./data:/app/data
      - ./.env:/app/.env
      - huggingface_cache:/home/app/.cache/huggingface
      - transformers_cache:/home/app/.cache/transformers
    env_file:
      - .env
    environment:
      - QDRANT_URL=http://qdrant:6333
      - DATABASE_URL=postgresql://rag_user:rag_password@postgres:5432/rag_db
    networks:
      - rag_network
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    command: python -m src.backend.init.container
    restart: "no"  # Init container should run once and exit

  # Backend API Service
  backend:
    container_name: rag_backend
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    ports:
      - "8000:8000"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    volumes:
      - ./src/backend:/app/src/backend
      - ./documents:/app/documents
      - ./cache:/app/cache
      - ./logs:/app/logs
      - ./data:/app/data
      - ./.env:/app/.env
      - huggingface_cache:/home/app/.cache/huggingface
      - transformers_cache:/home/app/.cache/transformers
    env_file:
      - .env
    environment:
      - QDRANT_URL=http://qdrant:6333
      - DATABASE_URL=postgresql://rag_user:rag_password@postgres:5432/rag_db
      - RELOAD_ON_CHANGE=True
    networks:
      - rag_network
    depends_on:
      init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/v1/health/liveness || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    command: uvicorn src.backend.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir src


  # Frontend Service
  frontend:
    container_name: rag_frontend
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    ports:
      - "3000:3000"
    volumes:
      - ./src/frontend:/app
      - /app/node_modules
      - ./.env:/app/.env
      - ./demo_admin_keys.json:/app/public/demo_admin_keys.json
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8000/api/v1
      - VITE_HMR_PORT=3000
    networks:
      - rag_network
    depends_on:
      backend:
        condition: service_healthy
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  rag_network:
    driver: bridge

volumes:
  qdrant_storage:
    driver: local
  postgres_data:
    driver: local 
  huggingface_cache:
    driver: local
  transformers_cache:
    driver: local